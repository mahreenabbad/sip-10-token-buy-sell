;; sip010-token
;; A SIP010-compliant fungible token with a mint function.
(define-constant ERR_UNAUTHORIZED (err u100))
(define-constant ERR_INVALID_AMOUNT (err u101))
(define-constant ERR_INVALID_RECIPIENT (err u102))

(impl-trait 'STXWGJQ101N1C1FYHK64TGTHN4793CHVKRW3ZGVV.sip-trait.sip-trait)

;; (impl-trait 'SP3FBR2AGK5H9QBDH3EEN6DF8EK8JY7RX8QJ5SVTE.sip-010-trait-ft-standard.sip-010-trait)


(define-fungible-token mytoken u100000000)
;; (define-constant contract-owner  tx-sender)
(define-data-var contract-owner principal tx-sender)


;; Constants/Variables
;; Stores metadata (optional 256-character UTF-8 string).
(define-data-var token-uri (optional (string-utf8 256)) none)


;; Errors



;; SIP-10 Functions
;;  Optional note (up to 34 bytes).
  ;; match: Evaluates memo.If present, prints it,If absent, skips it.
    ;; print logs the value of to-print (the content of memo) to the Stacks blockchain logs..
    ;; This is useful for debugging or auditing, but it doesnt affect the state of the contract.
    ;;  Stops execution if ft-transfer? fails.
(define-public (transfer
  (amount uint)
  (sender principal)
  (recipient principal)
  (memo (optional (buff 34)))
)
  (begin 
    (asserts! (is-eq tx-sender sender) ERR_UNAUTHORIZED)
    (asserts! (> amount u0) ERR_INVALID_AMOUNT)
    (asserts! (is-eq recipient) ERR_INVALID_RECIPIENT)
  
    
    (try! (ft-transfer? mytoken amount sender recipient))
    (match memo to-print (print to-print) 0x)
    (ok true)
  )
)

(define-read-only (get-balance (owner principal))
  (ok (ft-get-balance mytoken owner))
)

(define-read-only (get-name)
  (ok "mytoken")
)

(define-read-only (get-symbol)
  (ok "MT")
)

(define-read-only (get-decimals)
  (ok u6)
)

(define-read-only (get-total-supply)
  (ok (ft-get-supply mytoken))
)

(define-read-only (get-token-uri)
    (ok (var-get token-uri)
    )
)

(define-public (set-token-uri (value (string-utf8 256)))

;;   some: Wraps the new value in an optional type.
  (if (is-eq tx-sender (var-get contract-owner))
    (ok (var-set token-uri (some value)))
    (err ERR_UNAUTHORIZED)
  )
)



  ;; Make sure the length is within the limit.
  ;; Check if the sender is the contract owner.
   ;; Set the new token URI value wrapped in 'some'
   ;; Return success

 ;; Return error if not authorized


;; map: Applies the send-token function to each recipient in the list.
;; It generates a list of responses (success or error) for each transfer.

;; fold: Processes the list generated by map using the check-err function. It combines all responses into one final result.
;; Utility Functions
;; ---------------------------------------------------------
(define-public (send-many (recipients (list 200 { to: principal, amount: uint, memo: (optional (buff 34)) })))
  (fold check-err (map send-token recipients) (ok true))
)

(define-private (check-err (result (response bool uint)) (prior (response bool uint)))
  (match prior ok-value result err-value (err u100))
)

(define-private (send-token (recipient { to: principal, amount: uint, memo: (optional (buff 34)) }))
  (send-token-with-memo (get amount recipient) (get to recipient) (get memo recipient))
)

(define-private (send-token-with-memo (amount uint) (to principal) (memo (optional (buff 34))))
  (let ((transferOk (try! (transfer amount tx-sender to memo))))
    (ok transferOk)
  )
)

(define-public (mint (amount uint) (recipient principal))
	(begin
		
     (asserts! (> amount u0) ERR_INVALID_AMOUNT)
    (asserts! (is-eq recipient) ERR_INVALID_RECIPIENT)
		(ft-mint? mytoken amount recipient)
	)
)



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; @title Bonding Curve Token by STX.CITY
;; @version 2.0
;; @hash nPJJ8D7N5OELMvDl00bihg:_6nyuX8gMPTJialObJou7w:-ALmCjz1bCsaKbFKo237_WPUXp0flAd6TsTHpqUfSigRKgUAt75onWG4FsFhbPf34JGNzib6pIjTOZ3KaLEtBjNoBgDixDDKANYv2PlhKgY
;; @targetstx 2000

;; Errors 
;; (define-constant ERR-UNAUTHORIZED u401)
;; (define-constant ERR-NOT-OWNER u402)
;; (define-constant ERR-INVALID-PARAMETERS u403)
;; (define-constant ERR-NOT-ENOUGH-FUND u101)

;; (impl-trait 'SP3FBR2AGK5H9QBDH3EEN6DF8EK8JY7RX8QJ5SVTE.sip-010-trait-ft-standard.sip-010-trait)

;; ;; Constants
;; (define-constant MAXSUPPLY u1000000000000000)

;; ;; Variables
;; (define-fungible-token KCTO MAXSUPPLY)
;; (define-data-var contract-owner principal tx-sender) 



;; ;; SIP-10 Functions
;; (define-public (transfer (amount uint) (from principal) (to principal) (memo (optional (buff 34))))
;;     (begin
;;         (asserts! (is-eq from tx-sender) (err ERR-UNAUTHORIZED))
;;         (ft-transfer? KCTO amount from to)
;;     )
;; )


;; ;; DEFINE METADATA
;; (define-data-var token-uri (optional (string-utf8 256)) (some u"https://pdakhjpwkuwtadzmpnjm.supabase.co/storage/v1/object/public/uri/cxGyEYzw-south-korea-cto-0-decimals.json"))

;; (define-public (set-token-uri (value (string-utf8 256)))
;;     (begin
;;         (asserts! (is-eq tx-sender (var-get contract-owner)) (err ERR-UNAUTHORIZED))
;;         (var-set token-uri (some value))
;;         (ok (print {
;;               notification: "token-metadata-update",
;;               payload: {
;;                 contract-id: (as-contract tx-sender),
;;                 token-class: "ft"
;;               }
;;             })
;;         )
;;     )
;; )


;; (define-read-only (get-balance (owner principal))
;;   (ok (ft-get-balance KCTO owner))
;; )
;; (define-read-only (get-name)
;;   (ok "South Korea CTO")
;; )

;; (define-read-only (get-symbol)
;;   (ok "KCTO")
;; )

;; (define-read-only (get-decimals)
;;   (ok u6)
;; )

;; (define-read-only (get-total-supply)
;;   (ok (ft-get-supply KCTO))
;; )

;; (define-read-only (get-token-uri)
;;   (ok (var-get token-uri))
;; )

;; ;; transfer ownership
;; (define-public (transfer-ownership (new-owner principal))
;;   (begin
;;     ;; Checks if the sender is the current owner
;;     (if (is-eq tx-sender (var-get contract-owner))
;;       (begin
;;         ;; Sets the new owner
;;         (var-set contract-owner new-owner)
;;         ;; Returns success message
;;         (ok "Ownership transferred successfully"))
;;       ;; Error if the sender is not the owner
;;       (err ERR-NOT-OWNER)))
;; )


;; ;; ---------------------------------------------------------
;; ;; Utility Functions
;; ;; ---------------------------------------------------------
;; (define-public (send-many (recipients (list 200 { to: principal, amount: uint, memo: (optional (buff 34)) })))
;;   (fold check-err (map send-token recipients) (ok true))
;; )

;; (define-private (check-err (result (response bool uint)) (prior (response bool uint)))
;;   (match prior ok-value result err-value (err err-value))
;; )

;; (define-private (send-token (recipient { to: principal, amount: uint, memo: (optional (buff 34)) }))
;;   (send-token-with-memo (get amount recipient) (get to recipient) (get memo recipient))
;; )

;; (define-private (send-token-with-memo (amount uint) (to principal) (memo (optional (buff 34))))
;;   (let ((transferOk (try! (transfer amount tx-sender to memo))))
;;     (ok transferOk)
;;   )
;; )

;; (define-private (send-stx (recipient principal) (amount uint))
;;   (begin
;;     (try! (stx-transfer? amount tx-sender recipient))
;;     (ok true) 
;;   )
;; )

;; ;; ---------------------------------------------------------
;; ;; Mint
;; ;; ---------------------------------------------------------
;; (begin
;;     (try! (send-stx 'SP11WRT9TPPKP5492X3VE81CM1T74MD13SPFT527D u500000))
;;     (try! (ft-mint? KCTO u975609756097560 'SPEVNQDN6CH49Y82RXE8CEF1M4XPVXAHZR3YAJYP.south-korea-cto-stxcity-dex))
;;     (try! (ft-mint? KCTO u24390243902440 'SPEVNQDN6CH49Y82RXE8CEF1M4XPVXAHZR3YAJYP))
    
;;     (try! (send-stx 'SPEVNQDN6CH49Y82RXE8CEF1M4XPVXAHZR3YAJYP.south-korea-cto-stxcity-dex u10000000))
;;     (try! (send-stx 'SP1WTA0YBPC5R6GDMPPJCEDEA6Z2ZEPNMQ4C39W6M u5000000))
 
;; )